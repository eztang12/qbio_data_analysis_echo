new_cases[1] = covid19_confirmed[256, 5]
for(i in 6:725){
new_cases[i-4] = covid19_confirmed[256, i] - covid19_confirmed[256, i-1]
}
days = 1:721
plot(days, new_cases, type = "l", xlab = "Days since Jan. 22, 2020", ylab = "New cases per day", main = "US New Cases Per Day Since Jan. 22, 2020")
#The cause of the bigger oscillations are because of holiday spikes and the emergence of new variants. During the holidays, people are traveling more often, leading to more cases spiking. Furthermore, with the emergence of delta and omicron variants, the large oscillations become clear.
#The smaller oscillations are because different states have different testing methods, as well as different testing capacities, that may lead to some states reporting more or less cases in a day and thus affecting the new reported cases per day nationwide. There might have been some weeks where testing was slower than others, or people testing more on some days than others (for examples, testing for work on the weekdays vs. the weekends).
#5c
case_averages <- numeric(714)
for(i in 7:length(new_cases)){
case_averages[i-6] <- mean(new_cases[(i-6):i])
}
days = 1:714
plot(length(case_averages), case_averages, type = "l", xlab = "Days since Jan. 22, 2020", ylab = "Average cases per seven days", main = "US 7 Day Average Cases Since Jan. 22, 2020")
#5c
case_averages <- numeric(714)
for(i in 7:length(new_cases)){
case_averages[i-6] <- mean(new_cases[(i-6):i])
}
days = 1:length(case_averages)
plot(length(case_averages), case_averages, type = "l", xlab = "Days since Jan. 22, 2020", ylab = "Average cases per seven days", main = "US 7 Day Average Cases Since Jan. 22, 2020")
#5c
case_averages <- numeric(714)
for(i in 7:length(new_cases)){
case_averages[i-6] <- mean(new_cases[(i-6):i])
}
days = 1:length(case_averages)
plot(case_averages, type = "l", xlab = "Days since Jan. 22, 2020", ylab = "Average cases per seven days", main = "US 7 Day Average Cases Since Jan. 22, 2020")
daily_us_deaths <- covid19_deaths[256, 5:725]
new_deaths <- numeric(721)
new_deaths[1] = covid19_deaths[256, 5]
for(i in 6:725){
new_deaths[i-4] = covid19_deaths[256, i] - covid19_deaths[256, i-1]
}
death_averages <- numeric(714)
for(i in 7:length(new_deaths)){
death_averages[i-6] <- mean(new_deaths[(i-6):i])
}
plot(death_averages, type = "l", xlab = "Days since Jan. 22, 2020", ylab = "Average deaths per seven days", main = "US 7 Day Average Deaths Since Jan. 22, 2020")
#5c
case_averages <- numeric(714)
for(i in 7:length(new_cases)){
case_averages[i-6] <- mean(new_cases[(i-6):i])
}
plot(case_averages, type = "l", xlab = "Days since Jan. 29, 2020", ylab = "Average cases per seven days", main = "US 7 Day Average Cases Since Jan. 29, 2020")
new_deaths <- numeric(721)
new_deaths[1] = covid19_deaths[256, 5]
for(i in 6:725){
new_deaths[i-4] = covid19_deaths[256, i] - covid19_deaths[256, i-1]
}
death_averages <- numeric(714)
for(i in 7:length(new_deaths)){
death_averages[i-6] <- mean(new_deaths[(i-6):i])
}
plot(death_averages, type = "l", xlab = "Days since Jan. 29, 2020", ylab = "Average deaths per seven days", main = "US 7 Day Average Deaths Since Jan. 29, 2020")
#5c
case_averages <- numeric(714)
for(i in 7:length(new_cases)){
case_averages[i-6] <- mean(new_cases[(i-6):i])
}
plot(case_averages, type = "l", xlab = "Days since Jan. 29, 2020", ylab = "Average cases per seven days", main = "US 7 Day Average COVID Cases Since Jan. 29, 2020")
new_deaths <- numeric(721)
new_deaths[1] = covid19_deaths[256, 5]
for(i in 6:725){
new_deaths[i-4] = covid19_deaths[256, i] - covid19_deaths[256, i-1]
}
death_averages <- numeric(714)
for(i in 7:length(new_deaths)){
death_averages[i-6] <- mean(new_deaths[(i-6):i])
}
plot(death_averages, type = "l", xlab = "Days since Jan. 29, 2020", ylab = "Average deaths per seven days", main = "US 7 Day Average COVID Deaths Since Jan. 29, 2020")
#exercise 1.1
library("attenu")
#exercise 1.1
library(attenu)
#exercise 1.1
View(attenu)
is.na(attenu$station)
which(is.na(attenu$station))
attenu_cleaned <- attenu[!is.na(attenu$station),]
View(attenu_cleaned)
head(attenu_cleaned)
dim(attenu_cleaned)
dim(attenu)
#exercise 1.2
View(Theoph)
Theoph_2 <- Theoph
str(Theoph_2)
median(Theoph_2$Dose)
if(Theoph_2$Dose >= med_dose){
Theoph_2$Dose_Class = "high"
}
else{
Theoph_2$Dose_Class = "low"
}
med_dose <- median(Theoph_2$Dose)
if(Theoph_2$Dose >= med_dose){
Theoph_2$Dose_Class = "high"
}
else{
Theoph_2$Dose_Class = "low"
}
for(i in 1:166){
if(Theoph_2$Dose[i] >= med_dose){
Theoph_2$Dose_Class[i] = "high"
}
else{
Theoph_2$Dose_Class[i] = "low"
}
}
for(i in 1:166){
if(Theoph_2$Dose[i] >= med_dose){
Theoph_2$Dose_Class[i] = "high"
}
else{
Theoph_2$Dose_Class[i] = "low"
}
}
which(Theoph_2$Dose >= med_dose)
Theoph_2$Dose_Class <- ifelse(Theoph_2$Dose >= med_dose, "high", "low")
Theoph_2$Dose_Class <- ifelse(Theoph_2$Dose >= med_dose, "high", "low")
View(Theoph_2)
#exercise 1.3
getwd()
setwd("/Users/echotang/qbio490/qbio_data_analysis_echo/week3_homework")
starbucks <- read.csv("starbucks.csv")
which(is.na(starbucks))
is_row_empty(is.na(starbucks))
is_row_empty = is.na(starbucks)
View(is_row_empty)
View(starbucks)
is_row_empty <- rowSums(is.na(starbucks) == 0)
is_row_empty <- c(rowSums(is.na(starbucks) == 0))
is_row_empty <- c(rowSums(is.na(starbucks) == 0))
is_row_empty <- c((rowSums(is.na(starbucks) == 0)))
is_row_empty <- rowSums(is.na(starbucks[,2:7])) == 0
nrow(starbucks)
dim(starbucks)
length(is_row_empty)
starbucks_cleaned <- starbucks(which(!is_row_empty))
starbucks_cleaned <- starbucks[which(!is_row_empty)]
starbucks_cleaned <- starbucks[,which(!is_row_empty)]
starbucks_cleaned <- starbucks[,!is_row_empty]
starbucks_cleaned <- starbucks[!is_row_empty,]
#compare calories + carbs
plot(starbucks$Carbs, starbucks$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
View(starbucks_cleaned)
#clean starbucks data
starbucks_cleaned <- starbucks[is_row_empty,]
View(starbucks_cleaned)
#compare calories + carbs
plot(starbucks$Carbs, starbucks$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
#compare calories + carbs
plot(starbucks$Carb, starbucks$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
#compare calories + carbs
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
#compare calories + carbs
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
#clean starbucks data
starbucks_cleaned <- starbucks[is_row_empty,]
#compare calories + carbs
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
starbucks_cleaned <- starbucks[is_row_empty,]
#compare calories + carbs
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
max(starbucks_cleaned$Calories)
which(starbucks_cleaned$Calories == max(starbucks_cleaned$Calories))
#clean starbucks data
starbucks_cleaned <- starbucks[is_row_empty == TRUE,]
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink")
max(starbucks_cleaned$Calories) #max of 430 calories
which(starbucks_cleaned$Calories == max(starbucks_cleaned$Calories))
#Starbucks signature hot choclate
starbucks_cleaned[65,1]
max(starbucks_cleaned$Fat)
which(starbucks_cleaned$Fat == max(starbucks_cleaned$Fat))
starbuck_cleaned$is_highest_fat <- ifelse(starbucks_cleaned$Fat == max(starbucks_cleaned$Fat), "TRUE", "FALSE")
starbucks_cleaned$is_highest_fat <- ifelse(starbucks_cleaned$Fat == max(starbucks_cleaned$Fat), "TRUE", "FALSE")
View(starbucks)
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink", col = ifelse(starbucks_cleaned$Calories == max(starbucks_cleaned$Calories)), "red", "black")
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink", col = ifelse(starbucks_cleaned$Calories == max(starbucks_cleaned$Calories)), "red", "black"))
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink", col = ifelse(starbucks_cleaned$Calories == max(starbucks_cleaned$Calories), "red", "black"))
plot(starbucks_cleaned$Carb, starbucks_cleaned$Calories, xlab = "Carbs per drink in grams", ylab = "Calories per drink", col = ifelse(starbucks_cleaned$Fat == max(starbucks_cleaned$Fat), "red", "black"))
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
easy_plot <- function(x, y, color_data){
med = median(color_data)
ifelse(color_data >= med, levels = "high", levels = "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
easy_plot <- function(x, y, color_data){
med = median(color_data)
levels = chr(92)
ifelse(color_data >= med, levels = "high", levels = "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
easy_plot <- function(x, y, color_data){
med = median(color_data)
levels = ch(92)
ifelse(color_data >= med, levels = "high", levels = "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
easy_plot <- function(x, y, color_data){
med = median(color_data)
levels = character(92)
ifelse(color_data >= med, levels = "high", levels = "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
#exercise 1.4
#easy_plot <- function(x, y, color_data){
#  med = median(color_data)
#  levels = character(92)
#  ifelse(color_data >= med, levels = "high", levels = "low")
#  levels = factor(levels)
#  plot(x, y, col = levels, pch = 20)
#  print(cor.test(x,y))
#}
med = median(starbucks_cleaned$Carb)
levels <- ifelse(starbucks_cleaned$Carb >= med, "high", "low")
levels = factor(levels)
plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, col = levels, pch = 20)
easy_plot <- function(x, y, color_data){
med = median(color_data)
levels = character(92)
levels <- ifelse(color_data >= med, "high", "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
batting <- read.csv("batting.csv")
View(batting)
easy_plot(batting$G, batting$R, batting$H)
#exercise 2.1
View(iris)
#The dataset describes the sepal length, sepal width, petal length, and petal width of different species of irises.
nrow(iris)
#The dataset describes the sepal length, sepal width, petal length, and petal width of different species of irises.
dim(iris)
#exercise 2.3
histogram(iris$Sepal.Length, xlab = "Sepal length")
#exercise 2.3
hist(iris$Sepal.Length, xlab = "Sepal length")
hist(iris$Sepal.Width, xlab = "Sepal width")
hist(iris$Petal.Length, xlab = "Petal length")
hist(iris$Petal.Width, xlab = "Petal width")
#exercise 2.3
hist(iris$Sepal.Length, xlab = "Sepal length", main = "Histogram of sepal length")
hist(iris$Sepal.Width, xlab = "Sepal width", main = "Histogram of sepal width")
hist(iris$Petal.Length, xlab = "Petal length", main = "Histogram of petal length")
hist(iris$Petal.Width, xlab = "Petal width", main = "Histogram of petal width")
#exercise 2.3
hist(iris$Sepal.Length, xlab = "Sepal length", main = "Histogram of sepal length")
hist(iris$Sepal.Width, xlab = "Sepal width", main = "Histogram of sepal width")
hist(iris$Petal.Length, xlab = "Petal length", main = "Histogram of petal length")
hist(iris$Petal.Width, xlab = "Petal width", main = "Histogram of petal width")
#exercise 2.3
hist(iris$Sepal.Length, xlab = "Sepal length", main = "Histogram of sepal length")
hist(iris$Sepal.Width, xlab = "Sepal width", main = "Histogram of sepal width")
hist(iris$Petal.Length, xlab = "Petal length", main = "Histogram of petal length")
hist(iris$Petal.Width, xlab = "Petal width", main = "Histogram of petal width")
#exercise 2.4
sepal_width_mean <- mean(iris$Sepal.Width)
iris_copy <- iris
sepal_comp = character(150)
sepal_comp = ifelse(iris_copy$Sepal.Width >= sepal_width_mean, "wide-sepaled", "narrow-sepaled")
iris_copy$Sepal.Category <- sepal_comp
View(iris_copy)
#boxplot with sepal width
boxplot(iris_copy$Sepal.Width ~ iris_copy$Sepal.Category, xlab = "Sepal width per sepal categorization", ylab = "Sepal width")
help(pairs)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, select -c(iris$Species))
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, select = -c(iris$Species))
pairs(iris_copy2, labels = "Sepal Length", "Sepal Width", "Petal Length", "Petal Width")
View(iris_copy2)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, -c(iris$Species))
help(subset)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, select = c(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, select = iris[,1:4])
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, subset = iris != iris$Species)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, iris != iris$Species)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, iris[,] != iris$Species)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
iris_copy2 <- subset(iris, select = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
View(iris_copy2)
help("pairs")
pairs(iris_copy2, pch = 21)
pairs(iris_copy2, pch = 21, bg = c("red", "green3", "blue")
pairs(iris_copy2, pch = 21, bg = c("red", "green3", "blue")
pairs(iris_copy2, pch = 21, bg = c("red", "green3", "blue"))
pairs(iris_copy2, bg = c("red", "green3", "blue"))
help("pch")
pairs(iris_copy2, pch = 1, bg = c("red", "green3", "blue"))
pairs(iris_copy2, pch = 21, col = c("red", "green3", "blue"))
help(pairs)
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
pairs(iris[1:4], pch = 21, col = c("red", "green3", "blue"))[unclass(iris$Species)])
#exercise 2.5
#Versicolor and virginica look the most similar while setosa looks the most unique.
pairs(iris[1:4], pch = 21, col = c("red", "green3", "blue")[unclass(iris$Species)])
#exercise 1.4
batting <- read.csv("batting.csv")
#players scoring 3 or more home runs
which(batting$HR >= 3)
plot(batting$yearID, batting$HR, xlab = "Year", ylab = "Number of home runs")
easy_plot <- function(x, y, color_data){
med = median(color_data)
levels = character(92)
levels <- ifelse(color_data >= med, "high", "low")
levels = factor(levels)
plot(x, y, col = levels, pch = 20)
print(cor.test(x,y))
}
#use easy_plot on starbucks_cleaned and batting data
easy_plot(starbucks_cleaned$Calories, starbucks_cleaned$Fat, starbucks_cleaned$Carb)
View(batting)
#players scoring 3 or more home runs
nrow(batting[batting$HR >= 3])
#players scoring 3 or more home runs
nrow(batting[batting$HR >= 3,])
LA_Angels <- batting[batting$teamID == "LAA"]
LA_Angels <- batting[batting$teamID == "LAA",]
LA_Angels <- batting[batting$teamID == "LAA",]
plot(LA_Angels$yearID, LA_Angels$HR, xlab = "Year", ylab = "Number of home runs")
ATL_PIT <- batting[batting$teamID == "ATL" | batting$teamID == "PIT",]
plot(ATL_PIT$yearID, ATL_PIT$HR, xlab = "Year", ylab = "Number of home runs", col = c("red", "black"))
plot(ATL_PIT$yearID, ATL_PIT$HR, xlab = "Year", ylab = "Number of home runs", col = ifelse(ATL_PIT$teamID == "ATL", "red", "black"))
lm(weight~height, data = women)
fit <- lm(weight~height, data = women)
summary(fit)
coefficients(fit)
fitted(fit)
plot(wt, mpg)
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
plot(wt, mpg)
abline(lm(mpg~wt))
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title(main = "Miles per Gallon vs. Automobile weight")
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title(main = "Miles per Gallon vs. Automobile weight")
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type = 'l')
plot(dose, drugA, type = 'o')
plot(dose, drugA, type = 'o', lty = 2)
plot(dose, drugA, type = 'o', lty = 2, pch = 18)
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data")
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response")
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60))
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60), ylim = c(0,70))
lines(dose, drugB, type = 'o', lty = 2, col = "blue")
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60), ylim = c(0,70))
lines(dose, drugB, type = 'o', lty = 2, col = "blue")
legend("topleft", title = "Drug type", c("A", "B"), lty = c(2,2), pch = c(18, 15), col = c("red", "blue"))
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60), ylim = c(0,70))
lines(dose, drugB, type = 'o', lty = 2, col = "blue")
legend("topleft", title = "Drug type", c("A", "B"), lty = c(2,2), pch = c(18, 15), col = c("red", "blue"))
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60), ylim = c(0,70))
lines(dose, drugB, type = 'o', lty = 2, col = "blue", pch = 15)
legend("topleft", title = "Drug type", c("A", "B"), lty = c(2,2), pch = c(18, 15), col = c("red", "blue"))
abline(h = c(40), col = "gray", lty = 2)
plot(dose, drugA, type = 'o', lty = 2, pch = 18, col = "red", main = "Clinical Trials for Drug A", sub = "This is hypothetical data", xlab = "Dosage", ylab = "Drug Response", xlim = c(0, 60), ylim = c(0,70))
lines(dose, drugB, type = 'o', lty = 2, col = "blue", pch = 15)
legend("topleft", title = "Drug type", c("A", "B"), lty = c(2,2), pch = c(18, 15), col = c("red", "blue"))
abline(h = c(40), col = "gray", lty = 2)
if(!require(BiocManager)) install.packages("BiocManager")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
setwd("/Users/echotang/qbio490/qbio_data_analysis_echo/analysis_data/")
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
# this just loads a package
library(TCGAbiolinks)
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
help("GDCQuery")
if(!require(BiocManager)) install.packages("BiocManager")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# this just loads a package
library(TCGAbiolinks)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
if(!require(BiocManager)) install.packages("BiocManager")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# this just loads a package
library(TCGAbiolinks)
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
if(!require(BiocManager)) install.packages("BiocManager")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
install.packages("BiocManager")
library(BiocManager)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks", force = TRUE)
# this just loads a package
library(TCGAbiolinks)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks", force = TRUE)
# this just loads a package
library(TCGAbiolinks)
setwd("/Users/echotang/qbio490/qbio_data_analysis_echo/analysis_data/")
clin_query <- GDCquery(project = "TCGA-COAD", data.category = ..., file.type = "xml")
if(!require(BiocManager)) install.packages("BiocManager")
library(BiocManager)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks", force = TRUE)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
BiocManager::install("TCGAbiolinks", force = TRUE)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
BiocManager::install("TCGAbiolinks", force = TRUE)
if(!require(BiocManager)) install.packages("BiocManager")
library(BiocManager)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
BiocManager::install("TCGAbiolinks")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
if(!require(BiocManager)) install.packages("BiocManager")
library(BiocManager)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# this just loads a package
library(TCGAbiolinks)
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks", force=TRUE)
library(quantreg)
remove.packages("quantreg", lib="~/Library/R/3.6/library")
# the double colon syntax calls a function from a specific package
# this avoids loading the entire package
# in this case, we need to download TCGAbiolinks from Bioconductor using BiocManager
if(!require(TCGAbiolinks)) BiocManager::install("TCGAbiolinks", force=TRUE)
# this just loads a package
library(TCGAbiolinks)
install.packages("purrrogress")
